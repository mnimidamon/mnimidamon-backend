// Code generated by go-swagger; DO NOT EDIT.

package endpoints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is OpenAPI specification for Mnimidamon backend, cross platform application for file backups.",
    "title": "mnimidamon server",
    "contact": {
      "email": "miha.markez@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "mnimidamon.marmiha.com",
  "basePath": "/api/v1",
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get all application users.",
        "operationId": "getUsers",
        "parameters": [
          {
            "type": "string",
            "description": "Filter users based on username.",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of users.",
            "schema": {
              "description": "An array of Users.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "post": {
        "tags": [
          "authorization",
          "user"
        ],
        "summary": "Register user",
        "operationId": "registerUser",
        "parameters": [
          {
            "description": "The user to register.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authorization successful. Access token and created user response.",
            "schema": {
              "$ref": "#/definitions/RegisterResponse"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "current user"
        ],
        "summary": "Get current user profile",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "Current user profile.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "current user"
        ],
        "summary": "Delete current user account",
        "operationId": "deleteCurrentUser",
        "responses": {
          "202": {
            "description": "Successfuly deleted current user account."
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      }
    },
    "/users/current/computers": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "computer"
        ],
        "summary": "Get all computer of the current user",
        "operationId": "getCurrentUserComputers",
        "responses": {
          "200": {
            "description": "Current user computers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Computer"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "post": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "authorization",
          "computer"
        ],
        "summary": "Create a computer and get the computer api key",
        "operationId": "registerComputer",
        "parameters": [
          {
            "description": "Payload to register a new computer",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateComputerPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Computer successfuly created. Returned Computer object and API key that is used in X-COMP-KEY header.",
            "schema": {
              "$ref": "#/definitions/CreateComputerResponse"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      }
    },
    "/users/current/computers/current": {
      "get": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "computer"
        ],
        "summary": "Get current computer",
        "operationId": "getCurrentComputer",
        "responses": {
          "200": {
            "description": "The current Computer.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Computer"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      }
    },
    "/users/current/computers/current/groups/{group_id}/backups": {
      "get": {
        "security": [
          {
            "auth_key": []
          },
          {
            "comp_key": []
          }
        ],
        "tags": [
          "backup"
        ],
        "summary": "Get group backups",
        "operationId": "getGroupBackups",
        "responses": {
          "200": {
            "description": "Array of the group backups.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Backup"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "post": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "backup"
        ],
        "summary": "Initialize a new backup",
        "operationId": "initializeGroupBackup",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InitializeGroupBackupPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created backup object.",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "400": {
            "description": "If the backup is too big or there is any other problem.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathGroupId"
        }
      ]
    },
    "/users/current/computers/current/groups/{group_id}/backups/{backup_id}": {
      "get": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "backup"
        ],
        "summary": "Get a backup",
        "operationId": "getGroupBackup",
        "responses": {
          "200": {
            "description": "The specified .",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "put": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "backup"
        ],
        "summary": "Update the upload request flag",
        "operationId": "requestBackupUpload",
        "responses": {
          "200": {
            "description": "Upload request flag has been updated"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "delete": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "description": "If the current user is the owner of the backup then it initializes backup deletion otherwise deletes the logged local computer backup of the current computer.",
        "tags": [
          "backup"
        ],
        "summary": "Initialize a backup deletion",
        "operationId": "initializeGroupBackupDeletion",
        "responses": {
          "202": {
            "description": "The specified backup is logged to be deleted.",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathGroupId"
        },
        {
          "$ref": "#/parameters/PathBackupId"
        }
      ]
    },
    "/users/current/computers/current/groups/{group_id}/backups/{backup_id}/computers": {
      "get": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "computer"
        ],
        "summary": "Get a list on which computers the backup is stored",
        "operationId": "getBackupLocations",
        "responses": {
          "200": {
            "description": "Users and their computers that have the backup",
            "schema": {
              "$ref": "#/definitions/StoredBackupsComputerResponse"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathGroupId"
        },
        {
          "$ref": "#/parameters/PathBackupId"
        }
      ]
    },
    "/users/current/computers/current/groups/{group_id}/backups/{backup_id}/download": {
      "get": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "backup"
        ],
        "summary": "Download the backup file",
        "operationId": "downloadBackup",
        "responses": {
          "200": {
            "description": "Binary string of the encoded file content.",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathGroupId"
        },
        {
          "$ref": "#/parameters/PathBackupId"
        }
      ]
    },
    "/users/current/computers/current/groups/{group_id}/backups/{backup_id}/upload": {
      "post": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "backup"
        ],
        "summary": "Upload the backup file",
        "operationId": "uploadBackup",
        "parameters": [
          {
            "type": "file",
            "description": "The encodec backup file.",
            "name": "backup_data",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated backup object.",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathGroupId"
        },
        {
          "$ref": "#/parameters/PathBackupId"
        }
      ]
    },
    "/users/current/computers/current/groups/{group_id}/join": {
      "post": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "group computer"
        ],
        "operationId": "joinComputerToGroup",
        "parameters": [
          {
            "description": "Group creation payload.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroupComputerPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The group computer",
            "schema": {
              "$ref": "#/definitions/GroupComputer"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathGroupId"
        }
      ]
    },
    "/users/current/computers/current/groups/{group_id}/leave": {
      "post": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "group computer"
        ],
        "operationId": "leaveComputerFromGroup",
        "responses": {
          "204": {
            "description": "Successful deletion"
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathGroupId"
        }
      ]
    },
    "/users/current/computers/{computer_id}": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "computer"
        ],
        "summary": "Get a computer",
        "operationId": "getCurrentUserComputer",
        "responses": {
          "200": {
            "description": "The computer",
            "schema": {
              "$ref": "#/definitions/Computer"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathComputerId"
        }
      ]
    },
    "/users/current/groups": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "current user"
        ],
        "summary": "Get current user groups",
        "operationId": "getCurrentUserGroups",
        "responses": {
          "200": {
            "description": "Array of groups.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "post": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "group"
        ],
        "summary": "Create a new group",
        "operationId": "createGroup",
        "parameters": [
          {
            "description": "Group creation payload.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupCreatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new gorup.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      }
    },
    "/users/current/groups/{group_id}": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "group"
        ],
        "summary": "Get a group",
        "operationId": "getGroup",
        "responses": {
          "200": {
            "description": "The group denoted by group_id.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathGroupId"
        }
      ]
    },
    "/users/current/groups/{group_id}/computers": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "computer"
        ],
        "summary": "Get computers of a group",
        "operationId": "getCurrentUserGroupComputers",
        "responses": {
          "200": {
            "description": "Array of the denoted group computers.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupComputer"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathGroupId"
        }
      ]
    },
    "/users/current/groups/{group_id}/invites": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "group"
        ],
        "summary": "Get active invites of a group",
        "operationId": "getGroupInvites",
        "responses": {
          "200": {
            "description": "Array of active invites of the group.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invite"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "post": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "group"
        ],
        "summary": "Invite an user to a group",
        "operationId": "inviteUserToGroup",
        "parameters": [
          {
            "description": "Payload to invite a user",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InviteUserPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created invite object.",
            "schema": {
              "$ref": "#/definitions/Invite"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathGroupId"
        }
      ]
    },
    "/users/current/groups/{group_id}/members": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "group"
        ],
        "summary": "Get group members",
        "operationId": "getGroupMembers",
        "responses": {
          "200": {
            "description": "Array of group members.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathGroupId"
        }
      ]
    },
    "/users/current/invites": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "current user"
        ],
        "summary": "Get group invites of current user",
        "operationId": "getCurrentUserInvites",
        "responses": {
          "200": {
            "description": "Array of current user active group invites.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invite"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      }
    },
    "/users/current/invites/{group_id}": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "invite"
        ],
        "summary": "Get an invite",
        "operationId": "getCurrentUserInvite",
        "responses": {
          "200": {
            "description": "Invite object",
            "schema": {
              "$ref": "#/definitions/Invite"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "delete": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "invite"
        ],
        "summary": "Decline a group invite",
        "operationId": "declineCurrentUserInvite",
        "responses": {
          "204": {
            "description": "Invite declined."
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathGroupInviteId"
        }
      ]
    },
    "/users/current/invites/{group_id}/accept": {
      "post": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "invite"
        ],
        "summary": "Accept a group invite",
        "operationId": "acceptCurrentUserInvite",
        "responses": {
          "200": {
            "description": "The accepted group object.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathGroupInviteId"
        }
      ]
    },
    "/users/login": {
      "post": {
        "tags": [
          "authorization"
        ],
        "summary": "Login with user credentials",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "Login credentials.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Api key and profile response.",
            "schema": {
              "$ref": "#/definitions/RegisterResponse"
            }
          },
          "401": {
            "description": "Bad credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the user with the unique identificator",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "integer",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User with denoted by user_id.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/Internal"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/PathUserId"
        }
      ]
    }
  },
  "definitions": {
    "Backup": {
      "description": "Object that represents a file Backup.",
      "type": "object",
      "properties": {
        "backup_id": {
          "description": "Numeric identificator of the Backup.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "delete_request": {
          "description": "Owner of the backup requested deletion of this backup.",
          "type": "boolean",
          "example": false
        },
        "filename": {
          "description": "Name of the file.",
          "type": "string",
          "example": "photos.zip"
        },
        "group_id": {
          "description": "Numeric identificator of the Group that the Backup belongs to.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "hash": {
          "description": "File sha256 hash.",
          "type": "string",
          "example": "a01568c0dd1668b1e6d92708cc9faaa9816edfd5ac4190d4befbb5f38e45aa2e"
        },
        "on_server": {
          "description": "The file can be downloaded from server.",
          "type": "boolean",
          "example": true
        },
        "owner_id": {
          "description": "Numeric identificator of the Group Member which owns this backup.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "size": {
          "description": "Size of the file in MB.",
          "type": "integer",
          "example": 1024
        },
        "upload_request": {
          "description": "Request to upload to server, mutally exclusive with on_server flag.",
          "type": "boolean",
          "example": false
        }
      }
    },
    "Computer": {
      "description": "Object that represents an Computer of a User.",
      "type": "object",
      "properties": {
        "computer_id": {
          "description": "Numeric identificator of the computer.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "name": {
          "description": "Name of the Computer.",
          "type": "string",
          "maxLength": 12,
          "minLength": 3,
          "example": "storagetron"
        },
        "owner_id": {
          "description": "Numeric identificator of the Owner.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        }
      }
    },
    "CreateComputerPayload": {
      "description": "Payload that is used for registering a new computer.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the Computer.",
          "type": "string",
          "maxLength": 10,
          "minLength": 3,
          "example": "storagetron"
        }
      }
    },
    "CreateComputerResponse": {
      "description": "Created computer and computer api key.",
      "type": "object",
      "properties": {
        "comp_key": {
          "type": "string",
          "example": "xxxx.yyyy.zzzz"
        },
        "computer": {
          "$ref": "#/definitions/Computer"
        }
      }
    },
    "CreateGroupComputerPayload": {
      "description": "Payload when you join a computer to a group",
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "minimum": 1
        }
      },
      "example": {
        "groupComputerPayload": {
          "size": 1024
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "CodeOfTheError"
        }
      }
    },
    "Group": {
      "description": "Object that represents a Group.",
      "type": "object",
      "properties": {
        "group_id": {
          "description": "Numeric identificator of the Group.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "name": {
          "description": "Name of the Group.",
          "type": "string",
          "maxLength": 12,
          "minLength": 3,
          "example": "damons"
        }
      }
    },
    "GroupComputer": {
      "description": "Object that represents a Group Computer.",
      "type": "object",
      "properties": {
        "computer": {
          "$ref": "#/definitions/Computer"
        },
        "computer_id": {
          "description": "Numeric identificator of the Computer.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "group_id": {
          "description": "Numeric identificatior of the Group.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "storage_size": {
          "description": "How much space in MB does the User contribute to the Group.",
          "type": "integer",
          "example": 1024
        }
      }
    },
    "GroupComputerBackup": {
      "description": "Object that represents the Computer that has this file Backup stored locally.",
      "type": "object",
      "properties": {
        "backup_id": {
          "description": "Numeric identificator of the Backup.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "group_member_id": {
          "description": "Numeric identificator of the Group Member that has this file Backup locally stored.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        }
      }
    },
    "GroupCreatePayload": {
      "description": "Payload that is used to create a new group.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the group.",
          "type": "string",
          "maxLength": 12,
          "minLength": 3,
          "example": "damons"
        }
      }
    },
    "InitializeGroupBackupPayload": {
      "description": "Payload when you initialize a new group backup",
      "type": "object",
      "required": [
        "size",
        "hash",
        "file_name"
      ],
      "properties": {
        "file_name": {
          "type": "string",
          "minLength": 3
        },
        "hash": {
          "type": "string",
          "minLength": 1
        },
        "size": {
          "type": "integer",
          "minimum": 1
        }
      }
    },
    "Invite": {
      "description": "Object that represents an active invite to a group.",
      "type": "object",
      "properties": {
        "date": {
          "description": "The invitation date.",
          "type": "string",
          "format": "date"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "invite_id": {
          "description": "Numeric identificator of the Invite.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "InviteUserPayload": {
      "description": "Payload that is used for inviting a user to group",
      "type": "object",
      "required": [
        "username"
      ],
      "properties": {
        "username": {
          "description": "User to be invited",
          "type": "string",
          "maxLength": 10,
          "minLength": 3,
          "example": "marmiha"
        }
      }
    },
    "LoginPayload": {
      "description": "Payload that is used to acquire the authorization key.",
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "format": "password",
          "maxLength": 50,
          "minLength": 3,
          "example": "password"
        },
        "username": {
          "description": "Username of the User.",
          "type": "string",
          "maxLength": 10,
          "minLength": 3,
          "example": "marmiha"
        }
      }
    },
    "RegisterPayload": {
      "description": "Payload that is used for registration.",
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "format": "password",
          "maxLength": 50,
          "minLength": 3,
          "example": "password"
        },
        "username": {
          "description": "Username of the User.",
          "type": "string",
          "maxLength": 10,
          "minLength": 3,
          "example": "marmiha"
        }
      }
    },
    "RegisterResponse": {
      "description": "On successful registration response object.",
      "type": "object",
      "required": [
        "api_key",
        "user"
      ],
      "properties": {
        "api_key": {
          "type": "string",
          "example": "xxxx.yyyy.zzzz"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "StoredBackupsComputerResponse": {
      "description": "User and list of computers of that user which have the backup stored.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "computers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Computer"
            }
          },
          "user": {
            "$ref": "#/definitions/User"
          }
        }
      },
      "example": [
        {
          "computers": [
            {
              "computer_id": 2,
              "name": "storagebot"
            }
          ],
          "user": {
            "user_id": 10,
            "username": "marmiha"
          }
        },
        {
          "computers": [
            {
              "computer_id": 4,
              "name": "bubble"
            },
            {
              "computer_id": 10,
              "name": "thedamon"
            }
          ],
          "user": {
            "user_id": 42,
            "username": "doxator"
          }
        }
      ]
    },
    "User": {
      "description": "Object that represents an User.",
      "type": "object",
      "properties": {
        "user_id": {
          "description": "Numeric identificator of the User.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "username": {
          "description": "Username of the User.",
          "type": "string",
          "maxLength": 10,
          "minLength": 3,
          "example": "marmiha"
        }
      }
    }
  },
  "parameters": {
    "PathBackupId": {
      "type": "integer",
      "description": "Numeric ID of the Backup.",
      "name": "backup_id",
      "in": "path",
      "required": true
    },
    "PathComputerId": {
      "type": "integer",
      "description": "Numeric ID of the Computer.",
      "name": "computer_id",
      "in": "path",
      "required": true
    },
    "PathGroupId": {
      "type": "integer",
      "description": "Numeric ID of the Group.",
      "name": "group_id",
      "in": "path",
      "required": true
    },
    "PathGroupInviteId": {
      "type": "integer",
      "description": "Numeric ID of the Invite.",
      "name": "group_id",
      "in": "path",
      "required": true
    },
    "PathMemberId": {
      "type": "integer",
      "description": "Numeric ID of the Group Member.",
      "name": "member_id",
      "in": "path",
      "required": true
    },
    "PathUserId": {
      "type": "integer",
      "description": "Numeric ID of the User.",
      "name": "user_id",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "BadRequest": {
      "description": "Supplied parameters were not okay.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Internal": {
      "description": "Internal server error.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "The specified resource was not found.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "securityDefinitions": {
    "auth_key": {
      "description": "Used for information access control and current user based operations.",
      "type": "apiKey",
      "name": "X-AUTH-KEY",
      "in": "header"
    },
    "comp_key": {
      "description": "Used for identifying from which computer it's sent from.",
      "type": "apiKey",
      "name": "X-COMP-KEY",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Operations invloving authorization.",
      "name": "authorization"
    },
    {
      "description": "Operations on Users.",
      "name": "user"
    },
    {
      "description": "Operations on Current User.",
      "name": "current user"
    },
    {
      "description": "Operations on Computers.",
      "name": "computer"
    },
    {
      "description": "Operations on Groups.",
      "name": "group"
    },
    {
      "description": "Operations on Backups.",
      "name": "backup"
    },
    {
      "description": "Operations on Invites.",
      "name": "invite"
    },
    {
      "description": "Operations on Group Computers.",
      "name": "group computer"
    }
  ],
  "externalDocs": {
    "description": "Find more about the project on GitHub.",
    "url": "https://github.com/mnimidamon"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is OpenAPI specification for Mnimidamon backend, cross platform application for file backups.",
    "title": "mnimidamon server",
    "contact": {
      "email": "miha.markez@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "mnimidamon.marmiha.com",
  "basePath": "/api/v1",
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get all application users.",
        "operationId": "getUsers",
        "parameters": [
          {
            "type": "string",
            "description": "Filter users based on username.",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of users.",
            "schema": {
              "description": "An array of Users.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "authorization",
          "user"
        ],
        "summary": "Register user",
        "operationId": "registerUser",
        "parameters": [
          {
            "description": "The user to register.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authorization successful. Access token and created user response.",
            "schema": {
              "$ref": "#/definitions/RegisterResponse"
            }
          },
          "400": {
            "description": "Supplied parameters were not okay.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "current user"
        ],
        "summary": "Get current user profile",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "Current user profile.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "current user"
        ],
        "summary": "Delete current user account",
        "operationId": "deleteCurrentUser",
        "responses": {
          "202": {
            "description": "Successfuly deleted current user account."
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/computers": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "computer"
        ],
        "summary": "Get all computer of the current user",
        "operationId": "getCurrentUserComputers",
        "responses": {
          "200": {
            "description": "Current user computers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Computer"
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "authorization",
          "computer"
        ],
        "summary": "Create a computer and get the computer api key",
        "operationId": "registerComputer",
        "parameters": [
          {
            "description": "Payload to register a new computer",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateComputerPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Computer successfuly created. Returned Computer object and API key that is used in X-COMP-KEY header.",
            "schema": {
              "$ref": "#/definitions/CreateComputerResponse"
            }
          },
          "400": {
            "description": "Supplied parameters were not okay.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/computers/current": {
      "get": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "computer"
        ],
        "summary": "Get current computer",
        "operationId": "getCurrentComputer",
        "responses": {
          "200": {
            "description": "The current Computer.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Computer"
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/computers/current/groups/{group_id}/backups": {
      "get": {
        "security": [
          {
            "auth_key": []
          },
          {
            "comp_key": []
          }
        ],
        "tags": [
          "backup"
        ],
        "summary": "Get group backups",
        "operationId": "getGroupBackups",
        "responses": {
          "200": {
            "description": "Array of the group backups.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Backup"
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "backup"
        ],
        "summary": "Initialize a new backup",
        "operationId": "initializeGroupBackup",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InitializeGroupBackupPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created backup object.",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "400": {
            "description": "If the backup is too big or there is any other problem.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Group.",
          "name": "group_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/current/computers/current/groups/{group_id}/backups/{backup_id}": {
      "get": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "backup"
        ],
        "summary": "Get a backup",
        "operationId": "getGroupBackup",
        "responses": {
          "200": {
            "description": "The specified .",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "backup"
        ],
        "summary": "Update the upload request flag",
        "operationId": "requestBackupUpload",
        "responses": {
          "200": {
            "description": "Upload request flag has been updated"
          },
          "400": {
            "description": "Supplied parameters were not okay.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "description": "If the current user is the owner of the backup then it initializes backup deletion otherwise deletes the logged local computer backup of the current computer.",
        "tags": [
          "backup"
        ],
        "summary": "Initialize a backup deletion",
        "operationId": "initializeGroupBackupDeletion",
        "responses": {
          "202": {
            "description": "The specified backup is logged to be deleted.",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Group.",
          "name": "group_id",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "Numeric ID of the Backup.",
          "name": "backup_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/current/computers/current/groups/{group_id}/backups/{backup_id}/computers": {
      "get": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "computer"
        ],
        "summary": "Get a list on which computers the backup is stored",
        "operationId": "getBackupLocations",
        "responses": {
          "200": {
            "description": "Users and their computers that have the backup",
            "schema": {
              "$ref": "#/definitions/StoredBackupsComputerResponse"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Group.",
          "name": "group_id",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "Numeric ID of the Backup.",
          "name": "backup_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/current/computers/current/groups/{group_id}/backups/{backup_id}/download": {
      "get": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "backup"
        ],
        "summary": "Download the backup file",
        "operationId": "downloadBackup",
        "responses": {
          "200": {
            "description": "Binary string of the encoded file content.",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Supplied parameters were not okay.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Group.",
          "name": "group_id",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "Numeric ID of the Backup.",
          "name": "backup_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/current/computers/current/groups/{group_id}/backups/{backup_id}/upload": {
      "post": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "backup"
        ],
        "summary": "Upload the backup file",
        "operationId": "uploadBackup",
        "parameters": [
          {
            "type": "file",
            "description": "The encodec backup file.",
            "name": "backup_data",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "The updated backup object.",
            "schema": {
              "$ref": "#/definitions/Backup"
            }
          },
          "400": {
            "description": "Supplied parameters were not okay.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Group.",
          "name": "group_id",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "description": "Numeric ID of the Backup.",
          "name": "backup_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/current/computers/current/groups/{group_id}/join": {
      "post": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "group computer"
        ],
        "operationId": "joinComputerToGroup",
        "parameters": [
          {
            "description": "Group creation payload.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateGroupComputerPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The group computer",
            "schema": {
              "$ref": "#/definitions/GroupComputer"
            }
          },
          "400": {
            "description": "Supplied parameters were not okay.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Group.",
          "name": "group_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/current/computers/current/groups/{group_id}/leave": {
      "post": {
        "security": [
          {
            "auth_key": [],
            "comp_key": []
          }
        ],
        "tags": [
          "group computer"
        ],
        "operationId": "leaveComputerFromGroup",
        "responses": {
          "204": {
            "description": "Successful deletion"
          },
          "400": {
            "description": "Supplied parameters were not okay.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Group.",
          "name": "group_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/current/computers/{computer_id}": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "computer"
        ],
        "summary": "Get a computer",
        "operationId": "getCurrentUserComputer",
        "responses": {
          "200": {
            "description": "The computer",
            "schema": {
              "$ref": "#/definitions/Computer"
            }
          },
          "400": {
            "description": "Supplied parameters were not okay.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Computer.",
          "name": "computer_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/current/groups": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "current user"
        ],
        "summary": "Get current user groups",
        "operationId": "getCurrentUserGroups",
        "responses": {
          "200": {
            "description": "Array of groups.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "group"
        ],
        "summary": "Create a new group",
        "operationId": "createGroup",
        "parameters": [
          {
            "description": "Group creation payload.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupCreatePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new gorup.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Supplied parameters were not okay.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/groups/{group_id}": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "group"
        ],
        "summary": "Get a group",
        "operationId": "getGroup",
        "responses": {
          "200": {
            "description": "The group denoted by group_id.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Group.",
          "name": "group_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/current/groups/{group_id}/computers": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "computer"
        ],
        "summary": "Get computers of a group",
        "operationId": "getCurrentUserGroupComputers",
        "responses": {
          "200": {
            "description": "Array of the denoted group computers.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupComputer"
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Group.",
          "name": "group_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/current/groups/{group_id}/invites": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "group"
        ],
        "summary": "Get active invites of a group",
        "operationId": "getGroupInvites",
        "responses": {
          "200": {
            "description": "Array of active invites of the group.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invite"
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "group"
        ],
        "summary": "Invite an user to a group",
        "operationId": "inviteUserToGroup",
        "parameters": [
          {
            "description": "Payload to invite a user",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InviteUserPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The newly created invite object.",
            "schema": {
              "$ref": "#/definitions/Invite"
            }
          },
          "400": {
            "description": "Supplied parameters were not okay.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Group.",
          "name": "group_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/current/groups/{group_id}/members": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "group"
        ],
        "summary": "Get group members",
        "operationId": "getGroupMembers",
        "responses": {
          "200": {
            "description": "Array of group members.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "Supplied parameters were not okay.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Group.",
          "name": "group_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/current/invites": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "current user"
        ],
        "summary": "Get group invites of current user",
        "operationId": "getCurrentUserInvites",
        "responses": {
          "200": {
            "description": "Array of current user active group invites.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invite"
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/current/invites/{group_id}": {
      "get": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "invite"
        ],
        "summary": "Get an invite",
        "operationId": "getCurrentUserInvite",
        "responses": {
          "200": {
            "description": "Invite object",
            "schema": {
              "$ref": "#/definitions/Invite"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "invite"
        ],
        "summary": "Decline a group invite",
        "operationId": "declineCurrentUserInvite",
        "responses": {
          "204": {
            "description": "Invite declined."
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Invite.",
          "name": "group_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/current/invites/{group_id}/accept": {
      "post": {
        "security": [
          {
            "auth_key": []
          }
        ],
        "tags": [
          "invite"
        ],
        "summary": "Accept a group invite",
        "operationId": "acceptCurrentUserInvite",
        "responses": {
          "200": {
            "description": "The accepted group object.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the Invite.",
          "name": "group_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/login": {
      "post": {
        "tags": [
          "authorization"
        ],
        "summary": "Login with user credentials",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "Login credentials.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Api key and profile response.",
            "schema": {
              "$ref": "#/definitions/RegisterResponse"
            }
          },
          "401": {
            "description": "Bad credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the user with the unique identificator",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "integer",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User with denoted by user_id.",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "The specified resource was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "description": "Numeric ID of the User.",
          "name": "user_id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Backup": {
      "description": "Object that represents a file Backup.",
      "type": "object",
      "properties": {
        "backup_id": {
          "description": "Numeric identificator of the Backup.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "delete_request": {
          "description": "Owner of the backup requested deletion of this backup.",
          "type": "boolean",
          "example": false
        },
        "filename": {
          "description": "Name of the file.",
          "type": "string",
          "example": "photos.zip"
        },
        "group_id": {
          "description": "Numeric identificator of the Group that the Backup belongs to.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "hash": {
          "description": "File sha256 hash.",
          "type": "string",
          "example": "a01568c0dd1668b1e6d92708cc9faaa9816edfd5ac4190d4befbb5f38e45aa2e"
        },
        "on_server": {
          "description": "The file can be downloaded from server.",
          "type": "boolean",
          "example": true
        },
        "owner_id": {
          "description": "Numeric identificator of the Group Member which owns this backup.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "size": {
          "description": "Size of the file in MB.",
          "type": "integer",
          "example": 1024
        },
        "upload_request": {
          "description": "Request to upload to server, mutally exclusive with on_server flag.",
          "type": "boolean",
          "example": false
        }
      }
    },
    "Computer": {
      "description": "Object that represents an Computer of a User.",
      "type": "object",
      "properties": {
        "computer_id": {
          "description": "Numeric identificator of the computer.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "name": {
          "description": "Name of the Computer.",
          "type": "string",
          "maxLength": 12,
          "minLength": 3,
          "example": "storagetron"
        },
        "owner_id": {
          "description": "Numeric identificator of the Owner.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        }
      }
    },
    "CreateComputerPayload": {
      "description": "Payload that is used for registering a new computer.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the Computer.",
          "type": "string",
          "maxLength": 10,
          "minLength": 3,
          "example": "storagetron"
        }
      }
    },
    "CreateComputerResponse": {
      "description": "Created computer and computer api key.",
      "type": "object",
      "properties": {
        "comp_key": {
          "type": "string",
          "example": "xxxx.yyyy.zzzz"
        },
        "computer": {
          "$ref": "#/definitions/Computer"
        }
      }
    },
    "CreateGroupComputerPayload": {
      "description": "Payload when you join a computer to a group",
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "minimum": 1
        }
      },
      "example": {
        "groupComputerPayload": {
          "size": 1024
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "CodeOfTheError"
        }
      }
    },
    "Group": {
      "description": "Object that represents a Group.",
      "type": "object",
      "properties": {
        "group_id": {
          "description": "Numeric identificator of the Group.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "name": {
          "description": "Name of the Group.",
          "type": "string",
          "maxLength": 12,
          "minLength": 3,
          "example": "damons"
        }
      }
    },
    "GroupComputer": {
      "description": "Object that represents a Group Computer.",
      "type": "object",
      "properties": {
        "computer": {
          "$ref": "#/definitions/Computer"
        },
        "computer_id": {
          "description": "Numeric identificator of the Computer.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "group_id": {
          "description": "Numeric identificatior of the Group.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "storage_size": {
          "description": "How much space in MB does the User contribute to the Group.",
          "type": "integer",
          "example": 1024
        }
      }
    },
    "GroupComputerBackup": {
      "description": "Object that represents the Computer that has this file Backup stored locally.",
      "type": "object",
      "properties": {
        "backup_id": {
          "description": "Numeric identificator of the Backup.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "group_member_id": {
          "description": "Numeric identificator of the Group Member that has this file Backup locally stored.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        }
      }
    },
    "GroupCreatePayload": {
      "description": "Payload that is used to create a new group.",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of the group.",
          "type": "string",
          "maxLength": 12,
          "minLength": 3,
          "example": "damons"
        }
      }
    },
    "InitializeGroupBackupPayload": {
      "description": "Payload when you initialize a new group backup",
      "type": "object",
      "required": [
        "size",
        "hash",
        "file_name"
      ],
      "properties": {
        "file_name": {
          "type": "string",
          "minLength": 3
        },
        "hash": {
          "type": "string",
          "minLength": 1
        },
        "size": {
          "type": "integer",
          "minimum": 1
        }
      }
    },
    "Invite": {
      "description": "Object that represents an active invite to a group.",
      "type": "object",
      "properties": {
        "date": {
          "description": "The invitation date.",
          "type": "string",
          "format": "date"
        },
        "group": {
          "$ref": "#/definitions/Group"
        },
        "invite_id": {
          "description": "Numeric identificator of the Invite.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "InviteUserPayload": {
      "description": "Payload that is used for inviting a user to group",
      "type": "object",
      "required": [
        "username"
      ],
      "properties": {
        "username": {
          "description": "User to be invited",
          "type": "string",
          "maxLength": 10,
          "minLength": 3,
          "example": "marmiha"
        }
      }
    },
    "LoginPayload": {
      "description": "Payload that is used to acquire the authorization key.",
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "format": "password",
          "maxLength": 50,
          "minLength": 3,
          "example": "password"
        },
        "username": {
          "description": "Username of the User.",
          "type": "string",
          "maxLength": 10,
          "minLength": 3,
          "example": "marmiha"
        }
      }
    },
    "RegisterPayload": {
      "description": "Payload that is used for registration.",
      "type": "object",
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string",
          "format": "password",
          "maxLength": 50,
          "minLength": 3,
          "example": "password"
        },
        "username": {
          "description": "Username of the User.",
          "type": "string",
          "maxLength": 10,
          "minLength": 3,
          "example": "marmiha"
        }
      }
    },
    "RegisterResponse": {
      "description": "On successful registration response object.",
      "type": "object",
      "required": [
        "api_key",
        "user"
      ],
      "properties": {
        "api_key": {
          "type": "string",
          "example": "xxxx.yyyy.zzzz"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "StoredBackupsComputerResponse": {
      "description": "User and list of computers of that user which have the backup stored.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/StoredBackupsComputerResponseItems0"
      },
      "example": [
        {
          "computers": [
            {
              "computer_id": 2,
              "name": "storagebot"
            }
          ],
          "user": {
            "user_id": 10,
            "username": "marmiha"
          }
        },
        {
          "computers": [
            {
              "computer_id": 4,
              "name": "bubble"
            },
            {
              "computer_id": 10,
              "name": "thedamon"
            }
          ],
          "user": {
            "user_id": 42,
            "username": "doxator"
          }
        }
      ]
    },
    "StoredBackupsComputerResponseItems0": {
      "type": "object",
      "properties": {
        "computers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Computer"
          }
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "User": {
      "description": "Object that represents an User.",
      "type": "object",
      "properties": {
        "user_id": {
          "description": "Numeric identificator of the User.",
          "type": "integer",
          "readOnly": true,
          "example": 42
        },
        "username": {
          "description": "Username of the User.",
          "type": "string",
          "maxLength": 10,
          "minLength": 3,
          "example": "marmiha"
        }
      }
    }
  },
  "parameters": {
    "PathBackupId": {
      "type": "integer",
      "description": "Numeric ID of the Backup.",
      "name": "backup_id",
      "in": "path",
      "required": true
    },
    "PathComputerId": {
      "type": "integer",
      "description": "Numeric ID of the Computer.",
      "name": "computer_id",
      "in": "path",
      "required": true
    },
    "PathGroupId": {
      "type": "integer",
      "description": "Numeric ID of the Group.",
      "name": "group_id",
      "in": "path",
      "required": true
    },
    "PathGroupInviteId": {
      "type": "integer",
      "description": "Numeric ID of the Invite.",
      "name": "group_id",
      "in": "path",
      "required": true
    },
    "PathMemberId": {
      "type": "integer",
      "description": "Numeric ID of the Group Member.",
      "name": "member_id",
      "in": "path",
      "required": true
    },
    "PathUserId": {
      "type": "integer",
      "description": "Numeric ID of the User.",
      "name": "user_id",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "BadRequest": {
      "description": "Supplied parameters were not okay.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Internal": {
      "description": "Internal server error.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NotFound": {
      "description": "The specified resource was not found.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  },
  "securityDefinitions": {
    "auth_key": {
      "description": "Used for information access control and current user based operations.",
      "type": "apiKey",
      "name": "X-AUTH-KEY",
      "in": "header"
    },
    "comp_key": {
      "description": "Used for identifying from which computer it's sent from.",
      "type": "apiKey",
      "name": "X-COMP-KEY",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Operations invloving authorization.",
      "name": "authorization"
    },
    {
      "description": "Operations on Users.",
      "name": "user"
    },
    {
      "description": "Operations on Current User.",
      "name": "current user"
    },
    {
      "description": "Operations on Computers.",
      "name": "computer"
    },
    {
      "description": "Operations on Groups.",
      "name": "group"
    },
    {
      "description": "Operations on Backups.",
      "name": "backup"
    },
    {
      "description": "Operations on Invites.",
      "name": "invite"
    },
    {
      "description": "Operations on Group Computers.",
      "name": "group computer"
    }
  ],
  "externalDocs": {
    "description": "Find more about the project on GitHub.",
    "url": "https://github.com/mnimidamon"
  }
}`))
}
