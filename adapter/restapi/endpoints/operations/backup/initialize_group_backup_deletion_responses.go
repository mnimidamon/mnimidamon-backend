// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"mnimidamonbackend/adapter/restapi/modelapi"
)

// InitializeGroupBackupDeletionAcceptedCode is the HTTP code returned for type InitializeGroupBackupDeletionAccepted
const InitializeGroupBackupDeletionAcceptedCode int = 202

/*InitializeGroupBackupDeletionAccepted The specified backup is logged to be deleted.

swagger:response initializeGroupBackupDeletionAccepted
*/
type InitializeGroupBackupDeletionAccepted struct {
}

// NewInitializeGroupBackupDeletionAccepted creates InitializeGroupBackupDeletionAccepted with default headers values
func NewInitializeGroupBackupDeletionAccepted() *InitializeGroupBackupDeletionAccepted {

	return &InitializeGroupBackupDeletionAccepted{}
}

// WriteResponse to the client
func (o *InitializeGroupBackupDeletionAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(202)
}

// InitializeGroupBackupDeletionUnauthorizedCode is the HTTP code returned for type InitializeGroupBackupDeletionUnauthorized
const InitializeGroupBackupDeletionUnauthorizedCode int = 401

/*InitializeGroupBackupDeletionUnauthorized Unauthorized.

swagger:response initializeGroupBackupDeletionUnauthorized
*/
type InitializeGroupBackupDeletionUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *modelapi.Error `json:"body,omitempty"`
}

// NewInitializeGroupBackupDeletionUnauthorized creates InitializeGroupBackupDeletionUnauthorized with default headers values
func NewInitializeGroupBackupDeletionUnauthorized() *InitializeGroupBackupDeletionUnauthorized {

	return &InitializeGroupBackupDeletionUnauthorized{}
}

// WithPayload adds the payload to the initialize group backup deletion unauthorized response
func (o *InitializeGroupBackupDeletionUnauthorized) WithPayload(payload *modelapi.Error) *InitializeGroupBackupDeletionUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the initialize group backup deletion unauthorized response
func (o *InitializeGroupBackupDeletionUnauthorized) SetPayload(payload *modelapi.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InitializeGroupBackupDeletionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InitializeGroupBackupDeletionNotFoundCode is the HTTP code returned for type InitializeGroupBackupDeletionNotFound
const InitializeGroupBackupDeletionNotFoundCode int = 404

/*InitializeGroupBackupDeletionNotFound The specified resource was not found.

swagger:response initializeGroupBackupDeletionNotFound
*/
type InitializeGroupBackupDeletionNotFound struct {

	/*
	  In: Body
	*/
	Payload *modelapi.Error `json:"body,omitempty"`
}

// NewInitializeGroupBackupDeletionNotFound creates InitializeGroupBackupDeletionNotFound with default headers values
func NewInitializeGroupBackupDeletionNotFound() *InitializeGroupBackupDeletionNotFound {

	return &InitializeGroupBackupDeletionNotFound{}
}

// WithPayload adds the payload to the initialize group backup deletion not found response
func (o *InitializeGroupBackupDeletionNotFound) WithPayload(payload *modelapi.Error) *InitializeGroupBackupDeletionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the initialize group backup deletion not found response
func (o *InitializeGroupBackupDeletionNotFound) SetPayload(payload *modelapi.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InitializeGroupBackupDeletionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
