// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// InitializeGroupBackupDeletionHandlerFunc turns a function with the right signature into a initialize group backup deletion handler
type InitializeGroupBackupDeletionHandlerFunc func(InitializeGroupBackupDeletionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn InitializeGroupBackupDeletionHandlerFunc) Handle(params InitializeGroupBackupDeletionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// InitializeGroupBackupDeletionHandler interface for that can handle valid initialize group backup deletion params
type InitializeGroupBackupDeletionHandler interface {
	Handle(InitializeGroupBackupDeletionParams, interface{}) middleware.Responder
}

// NewInitializeGroupBackupDeletion creates a new http.Handler for the initialize group backup deletion operation
func NewInitializeGroupBackupDeletion(ctx *middleware.Context, handler InitializeGroupBackupDeletionHandler) *InitializeGroupBackupDeletion {
	return &InitializeGroupBackupDeletion{Context: ctx, Handler: handler}
}

/* InitializeGroupBackupDeletion swagger:route DELETE /users/current/computers/current/groups/{group_id}/backups/{backup_id} backup initializeGroupBackupDeletion

Delete a backup deletion

If the current user is the owner of the backup then it initializes backup deletion otherwise deletes the logged local computer backup of the current computer.

*/
type InitializeGroupBackupDeletion struct {
	Context *middleware.Context
	Handler InitializeGroupBackupDeletionHandler
}

func (o *InitializeGroupBackupDeletion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewInitializeGroupBackupDeletionParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
