// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UploadBackupMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var UploadBackupMaxParseMemory int64 = 32 << 20

// NewUploadBackupParams creates a new UploadBackupParams object
//
// There are no default values defined in the spec.
func NewUploadBackupParams() UploadBackupParams {

	return UploadBackupParams{}
}

// UploadBackupParams contains all the bound params for the upload backup operation
// typically these are obtained from a http.Request
//
// swagger:parameters uploadBackup
type UploadBackupParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Numeric ID of the Backup.
	  Required: true
	  In: path
	*/
	BackupID int64
	/*Name of the file with the extension.
	  In: formData
	*/
	FileName *string
	/*Numeric ID of the Group.
	  Required: true
	  In: path
	*/
	GroupID int64
	/*Hash of the encoded file binary.
	  In: formData
	*/
	Hash *string
	/*Encoded file binary.
	  In: formData
	*/
	UploadedBackup io.ReadCloser
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUploadBackupParams() beforehand.
func (o *UploadBackupParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(UploadBackupMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	rBackupID, rhkBackupID, _ := route.Params.GetOK("backup_id")
	if err := o.bindBackupID(rBackupID, rhkBackupID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdFileName, fdhkFileName, _ := fds.GetOK("file_name")
	if err := o.bindFileName(fdFileName, fdhkFileName, route.Formats); err != nil {
		res = append(res, err)
	}

	rGroupID, rhkGroupID, _ := route.Params.GetOK("group_id")
	if err := o.bindGroupID(rGroupID, rhkGroupID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdHash, fdhkHash, _ := fds.GetOK("hash")
	if err := o.bindHash(fdHash, fdhkHash, route.Formats); err != nil {
		res = append(res, err)
	}

	uploadedBackup, uploadedBackupHeader, err := r.FormFile("uploaded_backup")
	if err != nil && err != http.ErrMissingFile {
		res = append(res, errors.New(400, "reading file %q failed: %v", "uploadedBackup", err))
	} else if err == http.ErrMissingFile {
		// no-op for missing but optional file parameter
	} else if err := o.bindUploadedBackup(uploadedBackup, uploadedBackupHeader); err != nil {
		res = append(res, err)
	} else {
		o.UploadedBackup = &runtime.File{Data: uploadedBackup, Header: uploadedBackupHeader}
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBackupID binds and validates parameter BackupID from path.
func (o *UploadBackupParams) bindBackupID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("backup_id", "path", "int64", raw)
	}
	o.BackupID = value

	return nil
}

// bindFileName binds and validates parameter FileName from formData.
func (o *UploadBackupParams) bindFileName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.FileName = &raw

	return nil
}

// bindGroupID binds and validates parameter GroupID from path.
func (o *UploadBackupParams) bindGroupID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("group_id", "path", "int64", raw)
	}
	o.GroupID = value

	return nil
}

// bindHash binds and validates parameter Hash from formData.
func (o *UploadBackupParams) bindHash(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Hash = &raw

	return nil
}

// bindUploadedBackup binds file parameter UploadedBackup.
//
// The only supported validations on files are MinLength and MaxLength
func (o *UploadBackupParams) bindUploadedBackup(file multipart.File, header *multipart.FileHeader) error {
	return nil
}
