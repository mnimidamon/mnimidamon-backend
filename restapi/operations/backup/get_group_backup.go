// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetGroupBackupHandlerFunc turns a function with the right signature into a get group backup handler
type GetGroupBackupHandlerFunc func(GetGroupBackupParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetGroupBackupHandlerFunc) Handle(params GetGroupBackupParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetGroupBackupHandler interface for that can handle valid get group backup params
type GetGroupBackupHandler interface {
	Handle(GetGroupBackupParams, interface{}) middleware.Responder
}

// NewGetGroupBackup creates a new http.Handler for the get group backup operation
func NewGetGroupBackup(ctx *middleware.Context, handler GetGroupBackupHandler) *GetGroupBackup {
	return &GetGroupBackup{Context: ctx, Handler: handler}
}

/* GetGroupBackup swagger:route GET /users/current/computer/current/groups/{group_id}/backups/{backup_id} backup getGroupBackup

Get a backup

*/
type GetGroupBackup struct {
	Context *middleware.Context
	Handler GetGroupBackupHandler
}

func (o *GetGroupBackup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetGroupBackupParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
