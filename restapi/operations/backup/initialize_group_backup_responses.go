// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"mnimidamonbackend/models"
)

// InitializeGroupBackupOKCode is the HTTP code returned for type InitializeGroupBackupOK
const InitializeGroupBackupOKCode int = 200

/*InitializeGroupBackupOK Newly created backup object.

swagger:response initializeGroupBackupOK
*/
type InitializeGroupBackupOK struct {

	/*
	  In: Body
	*/
	Payload *models.Backup `json:"body,omitempty"`
}

// NewInitializeGroupBackupOK creates InitializeGroupBackupOK with default headers values
func NewInitializeGroupBackupOK() *InitializeGroupBackupOK {

	return &InitializeGroupBackupOK{}
}

// WithPayload adds the payload to the initialize group backup o k response
func (o *InitializeGroupBackupOK) WithPayload(payload *models.Backup) *InitializeGroupBackupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the initialize group backup o k response
func (o *InitializeGroupBackupOK) SetPayload(payload *models.Backup) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InitializeGroupBackupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InitializeGroupBackupUnauthorizedCode is the HTTP code returned for type InitializeGroupBackupUnauthorized
const InitializeGroupBackupUnauthorizedCode int = 401

/*InitializeGroupBackupUnauthorized Unauthorized.

swagger:response initializeGroupBackupUnauthorized
*/
type InitializeGroupBackupUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewInitializeGroupBackupUnauthorized creates InitializeGroupBackupUnauthorized with default headers values
func NewInitializeGroupBackupUnauthorized() *InitializeGroupBackupUnauthorized {

	return &InitializeGroupBackupUnauthorized{}
}

// WithPayload adds the payload to the initialize group backup unauthorized response
func (o *InitializeGroupBackupUnauthorized) WithPayload(payload *models.Error) *InitializeGroupBackupUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the initialize group backup unauthorized response
func (o *InitializeGroupBackupUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InitializeGroupBackupUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// InitializeGroupBackupNotFoundCode is the HTTP code returned for type InitializeGroupBackupNotFound
const InitializeGroupBackupNotFoundCode int = 404

/*InitializeGroupBackupNotFound If the backup is too big or there is any other problem.

swagger:response initializeGroupBackupNotFound
*/
type InitializeGroupBackupNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewInitializeGroupBackupNotFound creates InitializeGroupBackupNotFound with default headers values
func NewInitializeGroupBackupNotFound() *InitializeGroupBackupNotFound {

	return &InitializeGroupBackupNotFound{}
}

// WithPayload adds the payload to the initialize group backup not found response
func (o *InitializeGroupBackupNotFound) WithPayload(payload *models.Error) *InitializeGroupBackupNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the initialize group backup not found response
func (o *InitializeGroupBackupNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InitializeGroupBackupNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
