swagger: "2.0"

info:
  description: "This is OpenAPI specification for Mnimidamon backend, cross platform application for file backups."
  version: "1.0.0"
  title: mnimidamon server
  contact:
    email: miha.markez@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

host: mnimidamon.marmiha.com
basePath: /api/v1

tags:
  - name: authorization
    description: Operations invloving authorization.
  - name: user
    description: Operations on Users.
  - name: current user
    description: Operations on Current User.
  - name: computer
    description: Operations on Computers.
  - name: group
    description: Operations on Groups.
  - name: backup
    description: Operations on Backups.
  - name: invite
    description: Operations on Invites.

consumes:
  - application/json
produces:
  - application/json

schemes:
  - http



####################################
# Paths and operations decleration #
paths:


  # Basic operations on users.
  /users:

    # Get all users.
    get:
      tags:
        - user
      operationId: getUsers
      summary: Get all application users.
      description: ""
      parameters:
        - in: query
          name: filter
          description: "Filter users based on username."
          required: false
          type: string
      responses:
        200:
          description: Array of users.
          schema:
            description: "An array of Users."
            type: array
            items:
              $ref: "#/definitions/User"

    # Registraion.
    post:
      tags:
        - authorization
        - user
      operationId: registerUser
      summary: Register user
      description: ""
      parameters:
        - in: body
          name: body
          description: "The user to register."
          required: true
          schema:
            $ref: "#/definitions/RegisterPayload"
      responses:
        200:
          description: Authorization successful. Access token and created user response.
          schema:
            $ref: "#/definitions/RegisterResponse"
        400:
          $ref: "#/responses/BadRequest"


  # For logging in.
  /users/login:
    post:
      summary: Login with user credentials
      description: ""
      tags:
        - authorization
      operationId: loginUser
      parameters:
        - in: body
          name: body
          description: Login credentials.
          required: true
          schema:
            $ref: "#/definitions/LoginPayload"
      responses:
        200:
          description: Api key and profile response.
          schema:
            $ref: "#/definitions/RegisterResponse"
        401:
          description: Bad credentials.
          schema:
            $ref: "#/definitions/Error"


  # Get user.
  /users/{user_id}:
    parameters:
      - $ref: "#/parameters/PathUserId"


    get:
      tags:
        - user
      summary: Get the user with the unique identificator
      description: ""
      operationId: getUser
      parameters:
        - in: path
          required: true
          name: "user_id"
          type: integer
      responses:
        200:
          description: User with denoted by user_id.
          schema:
            $ref: "#/definitions/User"
        404:
          $ref: "#/responses/NotFound"


  /users/current:
    # Profil uporabnika.
    get:
      operationId: getCurrentUser
      tags:
        - current user
      summary: Get current user profile
      security:
        - auth_key: []
      responses:
        200:
          description: Current user profile.
          schema:
            $ref: "#/definitions/User"
    # Mogoce ne?
    delete:
      tags:
        - current user
      summary: Delete current user account
      operationId: deleteCurrentUser
      security:
        - auth_key: []
      responses:
        202:
          description: Successfuly deleted current user account.
        401:
          $ref: "#/responses/Unauthorized"

  /users/current/computers:
    # Get computers.
    get:
      tags:
        - computer
      summary: Get all computer of the current user
      operationId: getCurrentUserComputers
      security:
        - auth_key: []
      responses:
        200:
          description: Current user computers
          schema:
            type: array
            items:
              $ref: "#/definitions/Computer"
        401:
          $ref: "#/responses/Unauthorized"

    # Create a new computer, when there are multiple.
    post:
      operationId: registerComputer
      tags:
        - authorization
        - computer
      summary: Create a computer and get the computer api key
      security:
        - auth_key: []
      parameters:
        - in: body
          name: name
          required: true
          description: Payload to register a new computer
          schema:
            $ref: "#/definitions/CreateComputerPayload"
      responses:
        200:
          description: "Computer successfuly created. Returned Computer object and API key that is used in X-COMP-KEY header."
          schema:
            $ref: "#/definitions/CreateComputerResponse"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"


  /users/current/computers/{computer_id}:
    parameters:
      - $ref: "#/parameters/PathComputerId"

    # Get specific computer profile.
    get:
      operationId: getCurrentUserComputer
      tags:
        - computer
      security:
        - auth_key: []
      summary: Get a computer
      responses:
        200:
          description: The computer
          schema:
            $ref: "#/definitions/Computer"
        401:
          $ref: "#/responses/Unauthorized"


  /users/current/invites:
    # Get active user invites.
    get:
      operationId: getCurrentUserInvites
      tags:
        - current user
      summary: Get group invites of current user
      security:
        - auth_key: []
      responses:
        200:
          description: Array of current user active group invites.
          schema:
            type: array
            items:
              $ref: "#/definitions/Invite"
        401:
          $ref: "#/responses/Unauthorized"


  /users/current/invites/{invite_id}:
    parameters:
      - $ref: "#/parameters/PathInviteId"

    # Get the invite denoted by invite_id
    get:
      operationId: getCurrentUserInvite
      tags:
        - invite
      summary: Get an invite
      security:
        - auth_key: []
      responses:
        200:
          description: Invite object
          schema:
            $ref: "#/definitions/Invite"
        401:
          $ref: "#/responses/Unauthorized"

    # Decline the invite.
    delete:
      operationId: declineCurrentUserInvite
      tags:
        - invite
      summary: Decline a group invite
      security:
        - auth_key: []
      responses:
        204:
          description: Invite declined.
        401:
          $ref: "#/responses/Unauthorized"


  /users/current/invites/{invite_id}/accept:
    parameters:
      - $ref: "#/parameters/PathInviteId"

    # Accept invite
    post:
      operationId: acceptCurrentUserInvite
      tags:
        - invite
      summary: Accept a group invite
      security:
        - auth_key: []
      responses:
        200:
          description: The accepted group object.
          schema:
            $ref: "#/definitions/Group"
        401:
          $ref: "#/responses/Unauthorized"


  /users/current/groups:
    # Get groups of which the user is member of.
    get:
      operationId: getCurrentUserGroups
      tags:
        - current user
      summary: Get current user groups
      security:
        - auth_key: []
      responses:
        200:
          description: Array of groups.
          schema:
            type: array
            items:
              $ref: "#/definitions/Group"
        401:
          $ref: "#/responses/Unauthorized"

  /users/current/groups/{group_id}:
    parameters:
      - $ref: "#/parameters/PathGroupId"

    # Get group data.
    get:
      operationId: getGroup
      tags:
        - group
      summary: Get a group
      security:
        - auth_key: []
      responses:
        200:
          description: The group denoted by group_id.
          schema:
            $ref: "#/definitions/Group"
        401:
          $ref: "#/responses/Unauthorized"


  /users/current/groups/{group_id}/computers:
    parameters:
      - $ref: "#/parameters/PathGroupId"

    # Get members only if hes a member.
    get:
      operationId: getCurrentUserGroupComputers
      tags:
        - computer
      summary: Get computers of a group
      security:
        - auth_key: []
      responses:
        200:
          description: Array of the denoted group computers.
          schema:
            type: array
            items:
              $ref: "#/definitions/GroupComputer"
        401:
          $ref: "#/responses/Unauthorized"


  /users/current/groups/{group_id}/invites:
    parameters:
      - $ref: "#/parameters/PathGroupId"

    # Get all active invites.
    get:
      operationId: getGroupInvites
      tags:
        - group
      summary: Get active invites of a group
      security:
        - auth_key: []
      responses:
        200:
          description: Array of active invites of the group.
          schema:
            type: array
            items:
              $ref: "#/definitions/Invite"
        401:
          $ref: "#/responses/Unauthorized"


    # Invite a user.
    post:
      operationId: inviteUserToGroup
      tags:
        - group
      summary: Invite an user to a group
      security:
        - auth_key: []
      responses:
        200:
          description: The newly created invite object.
          schema:
            $ref: "#/definitions/Invite"
        400:
          # User is in group, or user already has been invited
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"

  /users/current/computer/current/groups/{group_id}/backups:
    parameters:
      - $ref: "#/parameters/PathGroupId"

    # Get all backups of a group.
    get:
      operationId: getGroupBackups
      tags:
        - backup
      summary: Get group backups
      security:
        - auth_key: []
        - comp_key: []
      responses:
        200:
          description: Array of the group backups.
          schema:
            type: array
            items:
              $ref: "#/definitions/Backup"
        401:
          $ref: "#/responses/Unauthorized"

    # Create a new backup log with upload_request 0.
    post:
      operationId: initializeGroupBackup
      tags:
        - backup
      summary: Initialize a new backup
      security:
        - auth_key: []
      responses:
        200:
          description: Newly created backup object.
          schema:
            $ref: "#/definitions/Backup"
        404:
          description: If the backup is too big or there is any other problem.
          schema:
            $ref: "#/definitions/Error"
        401:
          $ref: "#/responses/Unauthorized"



  /users/current/computer/current/groups/{group_id}/backups/{backup_id}:
    parameters:
      - $ref: "#/parameters/PathGroupId"
      - $ref: "#/parameters/PathBackupId"

    # Get the backup denoted by id.
    get:
      operationId: getGroupBackup
      tags:
        - backup
      summary: Get a backup
      security:
        - auth_key: []
        - comp_key: []
      responses:
        200:
          description: The specified .
          schema:
            $ref: "#/definitions/Backup"
        404:
          $ref: "#/responses/NotFound"
        401:
          $ref: "#/responses/Unauthorized"

    # Delete a backup TODO initialize a deletion.
    delete:
      operationId: initializeGroupBackupDeletion
      tags:
        - backup
      summary: Initialize a backup deletion
      security:
        - auth_key: []
        - comp_key: []
      responses:
        202:
          description: The specified backup is logged to be deleted.
        404:
          $ref: "#/responses/NotFound"
        401:
          $ref: "#/responses/Unauthorized"

    # For requesting the upload on the server.
    put:
      operationId: requestBackupUpload
      tags:
        - backup
      summary: Update the upload request flag
      security:
        - auth_key: []
      responses:
        200:
          description: Upload request flag has been updated
        400:
          $ref: "#/responses/BadRequest"
        404:
          $ref: "#/responses/NotFound"
        401:
          $ref: "#/responses/Unauthorized"

  /users/current/computer/current/groups/{group_id}/backups/{backup_id}/computers:
    parameters:
      - $ref: "#/parameters/PathGroupId"
      - $ref: "#/parameters/PathBackupId"

    get:
      operationId: getBackupLocations
      tags:
        - computer
      summary: Get a list on which computers the backup is stored
      security:
        - auth_key: []
        - comp_key: []
      responses:
        200:
          description: Users and their computers that have the backup
          schema:
            $ref: "#/definitions/StoredBackupsComputerResponse"
        404:
          $ref: "#/responses/NotFound"
        401:
          $ref: "#/responses/Unauthorized"


  /users/current/computer/current/groups/{group_id}/backups/{backup_id}/download:
    parameters:
      - $ref: "#/parameters/PathGroupId"
      - $ref: "#/parameters/PathBackupId"

    # Download the file of the backup, check the ownership and download_request
    get:
      operationId: downloadBackup
      tags:
        - backup
      summary: Download the backup file
      security:
        - auth_key: []
        - comp_key: []
      responses:
        200:
          description: Binary string of the encoded file content.
          schema:
            type: string
            format: binary
        400:
          $ref: "#/responses/BadRequest"
        404:
          $ref: "#/responses/NotFound"
        401:
          $ref: "#/responses/Unauthorized"


  /users/current/computer/current/groups/{group_id}/backups/{backup_id}/upload:
    parameters:
      - $ref: "#/parameters/PathGroupId"
      - $ref: "#/parameters/PathBackupId"

    # Upload the file of the backup, check the ownership and upload_request
    post:
      operationId: uploadBackup
      tags:
        - backup
      summary: Upload the backup file
      security:
        - auth_key: []
        - comp_key: []
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file_name
          type: string
          description: Name of the file with the extension.
        - in: formData
          name: uploaded_backup
          type: file
          description: Encoded file binary.
        - in: formData
          name: hash
          type: string
          description: Hash of the encoded file binary.
      responses:
        200:
          description: The updated backup object.
          schema:
            $ref: "#/definitions/Backup"
        404:
          $ref: "#/responses/NotFound"
        401:
          $ref: "#/responses/Unauthorized"




################################
# Schema and types definitions #
definitions:

  Group:
    description: "Object that represents a Group."
    type: object
    properties:
      group_id:
        description: "Numeric identificator of the Group."
        type: integer
        readOnly: true
        example: 42
      name:
        description: "Name of the Group."
        type: string
        example: "damons"
        minLength: 3
        maxLength: 12

  GroupComputer:
    description: "Object that represents a Group Computer."
    type: object
    properties:
      group_computer_id:
        description: "Numeric identificatior of the Group Computer."
        type: integer
        readOnly: true
        example: 42
      computer_id:
        description: "Numeric identificator of the Computer."
        type: integer
        readOnly: true
        example: 42
      group_id:
        description: "Numeric identificatior of the Group."
        type: integer
        readOnly: true
        example: 42
      storage_size:
        description: "How much space in MB does the User contribute to the Group."
        type: integer
        example: 1024

  Invite:
    description: "Object that represents an active invite to a group."
    type: object
    properties:
      invite_id:
        description: "Numeric identificator of the Invite."
        type: integer
        readOnly: true
        example: 42
      user_id:
        description: "Numeric identificator of the invited User."
        type: integer
        readOnly: true
        example: 42
      group_id:
        description: "Numeric identificator of the Group the user is invited to."
        type: integer
        readOnly: true
        example: 42
      date:
        description: "The invitation date."
        type: string
        format: date
      accepted:
        description: "If it's accepted."
        type: boolean
        example: false

  Backup:
    description: "Object that represents a file Backup."
    type: object
    properties:
      backup_id:
        description: "Numeric identificator of the Backup."
        type: integer
        readOnly: true
        example: 42
      owner_id:
        description: "Numeric identificator of the Group Member which owns this backup."
        type: integer
        readOnly: true
        example: 42
      group_id:
        description: "Numeric identificator of the Group that the Backup belongs to."
        type: integer
        readOnly: true
        example: 42
      filename:
        description: "Name of the file."
        type: string
        example: "photos.zip"
      size:
        description: "Size of the file in MB."
        type: integer
        example: 1024
      upload_request:
        description: "Request to upload to server, mutally exclusive with on_server flag."
        type: boolean
        example: false
      delete_request:
        description: "Owner of the backup requested deletion of this backup."
        type: boolean
        example: false
      on_server:
        description: "The file can be downloaded from server."
        type: boolean
        example: true

  GroupComputerBackup:
    description: "Object that represents the Computer that has this file Backup stored locally."
    type: object
    properties:
      backup_id:
        description: "Numeric identificator of the Backup."
        type: integer
        readOnly: true
        example: 42
      group_member_id:
        description: "Numeric identificator of the Group Member that has this file Backup locally stored."
        type: integer
        readOnly: true
        example: 42

  User:
    description: "Object that represents an User."
    type: object
    properties:
      user_id:
        description: "Numeric identificator of the User."
        type: integer
        readOnly: true
        example: 42
      username:
        description: "Username of the User."
        type: string
        example: "marmiha"
        minLength: 3
        maxLength: 10

  Computer:
    description: "Object that represents an Computer of a User."
    type: object
    properties:
      computer_id:
        description: "Numeric identificator of the computer."
        type: integer
        readOnly: true
        example: 42
      owner_id:
        description: "Numeric identificator of the Owner."
        type: integer
        readOnly: true
        example: 42
      name:
        description: "Name of the Computer."
        type: string
        example: "storagetron"
        minLength: 3
        maxLength: 12

  StoredBackupsComputerResponse:
    description: "User and list of computers of that user which have the backup stored."
    type: array
    items:
      type: object
      properties:
        user:
          $ref: "#/definitions/User"
        computers:
          type: array
          items:
            $ref: "#/definitions/Computer"
    example:
      - user:
          user_id: 10
          username: "marmiha"
        computers:
          - computer_id: 2
            name: "storagebot"
      - user:
          user_id: 42
          username: "doxator"
        computers:
          - computer_id: 4
            name: "bubble"
          - computer_id: 10
            name: "thedamon"


  # Create computer payload.
  CreateComputerPayload:
    description: "Payload that is used for registering a new computer."
    type: object
    required:
      - name
    properties:
      name:
        description: "Name of the Computer."
        type: string
        example: "storagetron"
        minLength: 3
        maxLength: 10

  CreateComputerResponse:
    description: "Created computer and computer api key."
    type: object
    properties:
      computer:
        $ref: "#/definitions/Computer"
      comp_key:
        type: string
        example: "xxxx.yyyy.zzzz"

  # Registration payload.
  RegisterPayload:
    description: "Payload that is used for registration."
    type: object
    required:
      - username
      - password
    properties:
      username:
        description: "Username of the User."
        type: string
        example: "marmiha"
        minLength: 3
        maxLength: 10
      password:
        type: string
        format: password
        example: "password"
        minLength: 3
        maxLength: 50

  # Login payload.
  LoginPayload:
    description: "Payload that is used to acquire the authorization key."
    type: object
    required:
      - username
      - password
    properties:
      username:
        description: "Username of the User."
        type: string
        example: "marmiha"
        minLength: 3
        maxLength: 10
      password:
        type: string
        format: password
        example: "password"
        minLength: 3
        maxLength: 50

  # Response on successful registration.
  RegisterResponse:
    description: "On successful registration response object."
    type: "object"
    required:
      - api_key
      - user
    properties:
      api_key:
        type: string
        example: "xxxx.yyyy.zzzz"
      user:
        $ref: "#/definitions/User"

  # Common response objects.
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        example: "CodeOfTheError"
      message:
        type: string
        example: "description of the error"


# Parameters definitions
parameters:
  PathComputerId:
    description: Numeric ID of the Computer.
    name: computer_id
    in: path
    type: integer
    required: true

  PathGroupId:
    description: Numeric ID of the Group.
    name: group_id
    in: path
    type: integer
    required: true

  PathUserId:
    description: Numeric ID of the User.
    name: user_id
    in: path
    type: integer
    required: true

  PathBackupId:
    description: Numeric ID of the Backup.
    name: backup_id
    in: path
    type: integer
    required: true

  PathMemberId:
    description: Numeric ID of the Group Member.
    name: member_id
    in: path
    type: integer
    required: true

  PathInviteId:
    description: Numeric ID of the Invite.
    name: invite_id
    in: path
    type: integer
    required: true

# Response definitions.
responses:

  NotFound:
    description: The specified resource was not found.
    schema:
      $ref: '#/definitions/Error'

  BadRequest:
    description: Supplied parameters were not okay.
    schema:
      $ref: "#/definitions/Error"

  Unauthorized:
    description: Unauthorized.
    schema:
      $ref: '#/definitions/Error'


# Security definitions.
securityDefinitions:
  auth_key:
    description: "Used for information access control and current user based operations."
    type: apiKey
    name: X-AUTH-KEY
    in: header
  comp_key:
    description: "Used for identifying from which computer it's sent from."
    type: apiKey
    name: X-COMP-KEY
    in: header



#################
# External docs #
externalDocs:
  description: "Find more about the project on GitHub."
  url: "https://github.com/mnimidamon"